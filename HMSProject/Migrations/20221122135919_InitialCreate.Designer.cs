// <auto-generated />
using System;
using HMSProject;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HMSProject.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20221122135919_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("HMSProject.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "8e445865-a24d-4543-a6c6-9443d048cdb9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "75ec8421-6821-47db-9258-3c75f6f51950",
                            Email = "admin@localhost.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@LOCALHOST.COM",
                            NormalizedUserName = "ADMIN@LOCALHOST.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEBoJaGvBRHL2ABee0EvaxSouhTFEAWaGO9J15NUemwI1fJRO3wLduf1Zrzov1YCgag==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "11412da5-55eb-4e79-a2a3-337e966f9367",
                            TwoFactorEnabled = false,
                            UserName = "Admin@localhost.com"
                        },
                        new
                        {
                            Id = "9e224968-33e4-4652-b7b7-8574d048cdb9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "46bf0a23-eef7-4998-be3d-7bb0f7b36ee6",
                            Email = "user@localhost.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER@LOCALHOST.COM",
                            NormalizedUserName = "USER@LOCALHOST.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEM2Q63Lj9xtP2FgK9AevnPQIpb6C0tzUGOseflS9QrZWVKEGkIXSGgze3Qi95ZeSQQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7aaa41a4-5e1d-4590-bc2f-96cc872d7979",
                            TwoFactorEnabled = false,
                            UserName = "User@localhost.com"
                        },
                        new
                        {
                            Id = "f583f605-f00c-4fcb-8393-5206bd1178c4",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "77e36a56-4f17-43f2-a366-32a88eb900c9",
                            Email = "murray@localhost.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "MURRAY@LOCALHOST.COM",
                            NormalizedUserName = "MURRAY@LOCALHOST.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEGm4ZHF0ebfl5g7cB9gmvmPshy/vfxOElGkWqIESuDj/W0xyKs77mD2dUqnEyJ5+0Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "bbb57304-a8e9-4606-a0c1-2ea4ef6b220e",
                            TwoFactorEnabled = false,
                            UserName = "murray@localhost.com"
                        },
                        new
                        {
                            Id = "0a928ef6-03ac-4a28-b0be-199ee6015077",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ce15af59-83b2-43f2-856e-3865660bcf3b",
                            Email = "michelle@localhost.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "MICHELLE@LOCALHOST.COM",
                            NormalizedUserName = "MICHELLE@LOCALHOST.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAENPhqlLRCkEFLZXx8gIqIAxT8eORrupPO47getoFVvBi7KakUU28VyhvM3mXMCDR2Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "886b86f5-8116-42c1-baef-5dc0f40636e0",
                            TwoFactorEnabled = false,
                            UserName = "michelle@localhost.com"
                        },
                        new
                        {
                            Id = "ff759c08-ffff-4cea-b72c-78d3b31b1289",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a3290263-5790-4027-9db3-8e21d4e24099",
                            Email = "zachariah@localhost.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ZACHARIAH@LOCALHOST.COM",
                            NormalizedUserName = "ZACHARIAH@LOCALHOST.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAENq+ME5mC6mK39ELC2Fp7x+H6FEZz9l8XjjEi0gcqMxDExHrHsP5p7FJFc2k85IUHg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1e78f425-aa41-4a4b-8a72-dae76d3befc1",
                            TwoFactorEnabled = false,
                            UserName = "zachariah@localhost.com"
                        });
                });

            modelBuilder.Entity("HMSProject.Data.DiagnosisSummary", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Diagnosis")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Medicines")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PatientName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Symptoms")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("DiagnosisSummaries");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Diagnosis = "Alzheimer’s disease",
                            Medicines = "Donepezil, galantamine and rivastigmine",
                            PatientName = "Patient1",
                            Symptoms = "Decreased range of motion"
                        },
                        new
                        {
                            Id = 2,
                            Diagnosis = "Arthritis",
                            Medicines = "Naproxen (Aleve), aspirin and ibuprofen (Motrin, Advil)",
                            PatientName = "Patient2",
                            Symptoms = "Pain, Stiffness, Swelling and Decreased range of motion"
                        });
                });

            modelBuilder.Entity("HMSProject.Data.Nurse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("YearsOfExperience")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("Nurses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ApplicationUserId = "ff759c08-ffff-4cea-b72c-78d3b31b1289",
                            Name = "Zachariah",
                            Surname = "Castaneda",
                            YearsOfExperience = 2
                        });
                });

            modelBuilder.Entity("HMSProject.Doctor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("YearsOfExperience")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("Doctors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ApplicationUserId = "8e445865-a24d-4543-a6c6-9443d048cdb9",
                            Name = "Andrew",
                            Surname = "Sheen",
                            YearsOfExperience = 9
                        },
                        new
                        {
                            Id = 2,
                            ApplicationUserId = "9e224968-33e4-4652-b7b7-8574d048cdb9",
                            Name = "Carla",
                            Surname = "Harley",
                            YearsOfExperience = 4
                        });
                });

            modelBuilder.Entity("HMSProject.Patient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("BloodGroup")
                        .HasColumnType("int");

                    b.Property<string>("Doctor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PhoneNumber")
                        .HasColumnType("int");

                    b.Property<string>("Sickness")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("Patients");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Age = 45,
                            ApplicationUserId = "f583f605-f00c-4fcb-8393-5206bd1178c4",
                            BloodGroup = 7,
                            Doctor = "Little",
                            Gender = 0,
                            Name = "Murray",
                            PhoneNumber = 727075020,
                            Sickness = "Malaria"
                        },
                        new
                        {
                            Id = 2,
                            Age = 23,
                            ApplicationUserId = "0a928ef6-03ac-4a28-b0be-199ee6015077",
                            BloodGroup = 4,
                            Doctor = "Hartman",
                            Gender = 1,
                            Name = "Michelle",
                            PhoneNumber = 828576405,
                            Sickness = "Ringworm"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "cac43a6e-f7bb-4448-baaf-1add431ccbbf",
                            ConcurrencyStamp = "852bb725-6e64-47f1-bc26-f7beee3ec153",
                            Name = "Doctor",
                            NormalizedName = "DOCTOR"
                        },
                        new
                        {
                            Id = "5b6a080e-96c3-49b3-98eb-f7f5390ef46b",
                            ConcurrencyStamp = "ad643e67-18c6-4401-aeb6-0e133775a664",
                            Name = "Nurse",
                            NormalizedName = "NURSE"
                        },
                        new
                        {
                            Id = "34144627-963c-40b6-aac5-1285592a52c0",
                            ConcurrencyStamp = "2bcd04aa-1585-40b3-b59c-8f5b422d0769",
                            Name = "Patient",
                            NormalizedName = "PATIENT"
                        },
                        new
                        {
                            Id = "cbc43a8e-f7bb-4445-baaf-1add431ffbbf",
                            ConcurrencyStamp = "f9a3dbb4-1644-4eac-b5d5-1ef487e13d96",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "8e445865-a24d-4543-a6c6-9443d048cdb9",
                            RoleId = "cbc43a8e-f7bb-4445-baaf-1add431ffbbf"
                        },
                        new
                        {
                            UserId = "9e224968-33e4-4652-b7b7-8574d048cdb9",
                            RoleId = "cac43a6e-f7bb-4448-baaf-1add431ccbbf"
                        },
                        new
                        {
                            UserId = "f583f605-f00c-4fcb-8393-5206bd1178c4",
                            RoleId = "34144627-963c-40b6-aac5-1285592a52c0"
                        },
                        new
                        {
                            UserId = "0a928ef6-03ac-4a28-b0be-199ee6015077",
                            RoleId = "34144627-963c-40b6-aac5-1285592a52c0"
                        },
                        new
                        {
                            UserId = "ff759c08-ffff-4cea-b72c-78d3b31b1289",
                            RoleId = "5b6a080e-96c3-49b3-98eb-f7f5390ef46b"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("HMSProject.Data.Nurse", b =>
                {
                    b.HasOne("HMSProject.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId");

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("HMSProject.Doctor", b =>
                {
                    b.HasOne("HMSProject.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId");

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("HMSProject.Patient", b =>
                {
                    b.HasOne("HMSProject.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId");

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("HMSProject.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("HMSProject.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HMSProject.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("HMSProject.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
